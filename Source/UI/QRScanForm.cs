//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;
using System.Reflection;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using Colt.Utilities;
using QRCoder;

namespace NSQRScan {
    public partial class QRScanForm {
        public QRScanForm() {
            InitializeComponent();
        }
        void exitClick(object sender, EventArgs ea) {
            CancelEventArgs cea = new CancelEventArgs();

            Application.Exit(cea);
            if (cea.Cancel) {
                return;
            }
            Application.Exit();
        }
        void formLoad(object sender, EventArgs ea) {
            this.pbData.AllowDrop = true;
        }
        [STAThread()]
        public static void Main(string[] args) {
            int exitCode = 0;

            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            try {
                Application.Run(new QRScanForm());
            } catch (Exception ex) {
                Trace.WriteLine(ex.Message);
                exitCode = 1;
            }
            Environment.Exit(exitCode);
        }

        QRCoder.QRCodeGenerator qrgen = null;

        void tbInput_Validated(object sender, EventArgs e) {
            string data;

            TextBox tb = sender as TextBox;

            if (tb != null) {
                data = tb.Text;
                if (Utilities.IsLabelValid(data)) {
                    this.tbDate.Text = Utilities.Parselabel_GeDate(data);
                    this.tbModelNumber.Text = Utilities.Parselabel_GetModel(data);
                    this.tbSerialNumber.Text = Utilities.Parselabel_GetSerialNumber(data);
                    //                    Trace.WriteLine("here");

                    // #@CE1000@$LE389884$%29122015%#


                    Clipboard.SetData(DataFormats.Text, tbModelNumber.Text + "," + tbSerialNumber.Text);
                    //                    using (QRCodeGenerator qrcg = new QRCodeGenerator()) {
                    //                      qrcg.CreateQrCode
                    //                }
                    //                        QRCoder.QRCodeGenerator.
                    if (qrgen == null)
                        qrgen = new QRCodeGenerator();
#if false
                    Bitmap bmp;
                    using (QRCodeData qrCodeData = qrgen.CreateQrCode(data, QRCodeGenerator.ECCLevel.H)) {
                        using (QRCode qrCode = new QRCode(qrCodeData)) {
                            bmp = new Bitmap(
                                qrCode.GetGraphic(20, Color.Black, Color.White, true),
                                new Size(64, 64));
                            writeQRImage(akey, outPath, fmts, bmp);
                        }
                    }
#endif
                }
            }
        }

        void btnGenerate_Click(object sender, EventArgs e) {
            Bitmap bmp;
            string data, model, sn, date;

            if (!validateUI(out model, out sn, out date))
                return;
            if (qrgen == null)
                qrgen = new QRCodeGenerator();

            data = Utilities.GetQrCode(this.tbModelNumber.Text, this.tbSerialNumber.Text, this.tbDate.Text).ToUpper();
            Trace.WriteLine("DATA = " + data);
            using (QRCodeData qrCodeData = qrgen.CreateQrCode(data, QRCodeGenerator.ECCLevel.H)) {
                using (QRCode qrCode = new QRCode(qrCodeData)) {
                    bmp = new Bitmap(
                        qrCode.GetGraphic(20, Color.Black, Color.White, true),
                        new Size(64, 64));
                    ////        if (!string.IsNullOrEmpty(dragFilename))
                    //             if (File.Exists(dragFilename))
                    //                  File.Delete(dragFilename);
                    //                    dragFilename = Path.Combine(Environment.GetEnvironmentVariable("%TEMP%"), Guid.NewGuid().ToString() + ".bmp");
                    //                  FileStream fs = File.Create(dragFilename);
                    //                fs.Close();
                    myView1.image = bmp;
                    Clipboard.SetImage(bmp);
                    Clipboard.SetData(DataFormats.Bitmap, bmp);
                }
            }
        }
        string dragFilename;

        bool validateUI(out string model, out string sn, out string date) {
            model = sn = date = string.Empty;
            if (string.IsNullOrEmpty(model = this.tbModelNumber.Text.ToUpper())) {
                MessageBox.Show("model is empty", "Error");
                tbModelNumber.Focus();
                return false;
            } else
                this.tbModelNumber.Text = model;
            if (string.IsNullOrEmpty(sn = this.tbSerialNumber.Text.ToUpper())) {
                MessageBox.Show("serial-number is empty", "Error");
                tbSerialNumber.Focus();
                return false;
            } else
                this.tbSerialNumber.Text = sn;
            if (string.IsNullOrEmpty(date = this.tbDate.Text.ToUpper()))
                this.tbDate.Text = date = DateTime.Now.ToString("ddmmmyyyyy");
            this.tbDate.Text = date;
            return true;
        }


        void tbInput_Enter(object sender, EventArgs e) {
            tbInput.Text = string.Empty;
            tbSerialNumber.Text = string.Empty;
            tbModelNumber.Text = string.Empty;
            tbDate.Text = string.Empty;
        }

        void myView1_DragDrop(object sender, DragEventArgs e) {
            Logger.logMethod(MethodBase.GetCurrentMethod());
            string[] files = e.Data.GetData(DataFormats.FileDrop) as string[];
            Logger.logMethod(MethodBase.GetCurrentMethod());
            //            if (files!=null&&files.Length>0)

        }

        void myView1_DragEnter(object sender, DragEventArgs e) {
            //          Logger.logMethod(MethodBase.GetCurrentMethod());
            if (e.Data.GetDataPresent(DataFormats.FileDrop)) {
                e.Effect = DragDropEffects.Copy;
                return;
            }
            e.Effect = DragDropEffects.None;
        }

        void myView1_DragLeave(object sender, EventArgs e) {
            Logger.logMethod(MethodBase.GetCurrentMethod());

        }

        void myView1_DragOver(object sender, DragEventArgs e) {
            string[] files;
            bool isOK = true;
            //       Logger.logMethod(MethodBase.GetCurrentMethod());
            if (e.Data.GetDataPresent(DataFormats.FileDrop)) {
                //                e.Effect = DragDropEffects.Copy;

                files = e.Data.GetData(DataFormats.FileDrop) as string[];
                Logger.logMethod(MethodBase.GetCurrentMethod());
                if (files != null && files.Length > 0) {
                    foreach (string aFile in files) {
                        //                    string tmp = Path.GetExtension(aFile);
                        //                      Logger.logMethod(MethodBase.GetCurrentMethod());
                        if (string.Compare(Path.GetExtension(aFile), ".bmp", true) != 0) {
                            //                            e.Effect = DragDropEffects.None;
                            //                          return;
                            isOK ^= true;
                            break;
                        }
                    }
                    //                    e.Effect = DragDropEffects.Copy;
                    //                  return;
                }
                //                return;
            }
            //           e.Effect = DragDropEffects.None;
            e.Effect = isOK ? DragDropEffects.Copy : DragDropEffects.None;
        }

        void myView1_MouseMove(object sender, MouseEventArgs e) {
            if (e.Button == MouseButtons.Left) {
                if (myView1.image != null) {
                    //                 myView1.DoDragDrop(myView1.image, DragDropEffects.All);
                    if (dragFilename != null && !string.IsNullOrEmpty(dragFilename))
                        if (File.Exists(dragFilename))
                            File.Delete(dragFilename);
                    dragFilename = Path.Combine(Environment.GetEnvironmentVariable("TEMP"), Guid.NewGuid().ToString() + ".bmp");
                    FileStream fs = File.Create(dragFilename);
                    fs.Close();
                    //                    bmp.Save(dragFilename);
                    myView1.image.Save(dragFilename);
                    DataObject dob = new DataObject();
                    dob.SetData(DataFormats.FileDrop, new string[] { dragFilename });
                    dob.SetData(DataFormats.Bitmap, myView1.image);
                    //               myView1 .DoDragDrop ( )
                    myView1.DoDragDrop(dob, DragDropEffects.All);
                }
            }
        }

        void pbData_DragDrop(object sender, DragEventArgs e) {

            if ((e.Data.GetDataPresent(DataFormats.Bitmap))) {
                this.pbData.Image = (Bitmap)(e.Data.GetData(DataFormats.Bitmap));
            }
        }

        void pbData_DragEnter(object sender, DragEventArgs e) {

            if (e.Data.GetDataPresent(DataFormats.Bitmap) ||
                e.Data.GetDataPresent(DataFormats.FileDrop)
                ) {
                e.Effect = DragDropEffects.Copy;
            } else
                e.Effect = DragDropEffects.None;

        }

        void pbData_DragLeave(object sender, EventArgs e) {
            Logger.logMethod(MethodBase.GetCurrentMethod());

        }

        void pbData_DragOver(object sender, DragEventArgs e) {
            Logger.logMethod(MethodBase.GetCurrentMethod());

        }

        string prevPrinter;
        const string KEY = "Previous Printer";

        void btnPrint_Click(object sender, EventArgs e) {
            PrintDialog pd;
            string data, model, sn, date;

            if (!validateUI(out model, out sn, out date))
                return;
            pd = new PrintDialog();
            pd.PrinterSettings = new PrinterSettings();
            if (string.IsNullOrEmpty(prevPrinter))
                prevPrinter = Application.UserAppDataRegistry.GetValue(KEY, string.Empty) as string;
            if (!string.IsNullOrEmpty(prevPrinter))
                pd.PrinterSettings.PrinterName = prevPrinter;
            if (DialogResult.OK == pd.ShowDialog(this)) {
                data = Properties.Settings.Default.zebraCode.
                        Replace("[MODEL]", model).
                        Replace("[SN]", sn).
                        Replace("[DATE]", date);
                RawPrinterHelper.SendStringToPrinter(
                    prevPrinter = pd.PrinterSettings.PrinterName,
                    data);
                Application.UserAppDataRegistry.SetValue(KEY, prevPrinter);
            }
        }

        const string DEFAULT_FILE = @"\\appdeploy\appdeploy\Colt Software\PistolQuickHits\Configuration\ModelList.xml";
        const string KEY2 = "ModelFile";
        string prevFile;
        void btnLoadModels_Click(object sender, EventArgs e) {
            OpenFileDialog ofd = new OpenFileDialog();
            XmlSerializer xs;
            XmlReaderSettings xrs;
            XmlDeserializationEvents events;
            string dir;
            Type t;
            List<ModelDetail> models;

            ofd.CheckPathExists = true;
            ofd.DefaultExt = "xml";
            ofd.Filter = "Xml files (*.xml)|*.xml|All files (*.*)|*.*";
            ofd.FilterIndex = 0;
            if (string.IsNullOrEmpty(prevFile))
                prevFile = Application.UserAppDataRegistry.GetValue(KEY2, DEFAULT_FILE) as string;
            if (!string.IsNullOrEmpty(prevFile)) {
                ofd.InitialDirectory = (dir = Path.GetDirectoryName(prevFile));
                ofd.FileName = Path.GetFileName(prevFile);
                //                ofd.FileName = Path.GetFileName(prevFile);
                ofd.FileName = Path.GetFileNameWithoutExtension(prevFile);
            }
            if (ofd.ShowDialog() == DialogResult.OK) {
                Application.UserAppDataRegistry.SetValue(DEFAULT_FILE, prevFile = ofd.FileName);

                try {
                    t = typeof(List<ModelDetail>);
                    xs = new XmlSerializer(t);
                    xrs = new XmlReaderSettings();
                    xrs.ValidationEventHandler += validateReader;
                    using (XmlReader xr = XmlReader.Create(ofd.FileName, xrs)) {
                        events = new XmlDeserializationEvents();
                        events.OnUnknownAttribute = this.unknownAttribute;
                        events.OnUnknownElement = this.unknownElement;
                        events.OnUnknownNode = this.unknownNode;
                        events.OnUnreferencedObject = this.unrefObject;
                        //                    usingm 
                        models = xs.Deserialize(xr, events) as List<ModelDetail>;
                        Trace.WriteLine("here");
                    }
                } catch (Exception ex) {
                    Logger.logMethod(MethodBase.GetCurrentMethod(), ex);
                }
            }
        }

        void unknownElement(object sender, XmlElementEventArgs e) {
            Logger.logMethod(MethodBase.GetCurrentMethod(), "unknown element: '"+e.Element.Name +"'.");
            // PartNumber
            // SerialFormat
            // ModelNumber
            // DrawingNumber
        }

        void unknownNode(object sender, XmlNodeEventArgs e) {
            Logger.logMethod(MethodBase.GetCurrentMethod(), "unhandled node: '"+e.Name+"'");

        }

        void unrefObject(object sender, UnreferencedObjectEventArgs e) {
            Logger.logMethod(MethodBase.GetCurrentMethod(), e.ToString());

        }

        void unknownAttribute(object sender, XmlAttributeEventArgs e) {
            Logger.logMethod(MethodBase.GetCurrentMethod(), e.ToString());

        }

        void validateReader(object sender, ValidationEventArgs e) {
            Logger.logMethod(MethodBase.GetCurrentMethod(), e.ToString());
        }
    }


    public class ModelDetail {
        [XmlElement("SerialFormat")]
        public string serialFormat;
        [XmlElement("ModelNumber")]
        public string modelNumber;

        [XmlElement("PartNumber")]
        public string partNumber;
        [XmlElement("DrawingNumber")]
        public string drawingNumber;


        //2016-11-18 03:23:17 - INFO QRScanForm.unknownNode: unhandled node: 'PartNumber'
        //2016-11-18 03:23:17 - INFO QRScanForm.unknownNode: unhandled node: 'PartNumber'
        //2016-11-18 03:23:17 - INFO QRScanForm.unknownElement: unknown element: 'PartNumber'.
        //2016-11-18 03:23:17 - INFO QRScanForm.unknownElement: unknown element: 'PartNumber'.
        //2016-11-18 03:23:17 - INFO QRScanForm.unknownNode: unhandled node: 'DrawingNumber'
        //2016-11-18 03:23:17 - INFO QRScanForm.unknownNode: unhandled node: 'DrawingNumber'
        //2016-11-18 03:23:17 - INFO QRScanForm.unknownElement: unknown element: 'DrawingNumber'.
        //2016-11-18 03:23:17 - INFO QRScanForm.unknownElement: unknown element: 'DrawingNumber'.
    }
}